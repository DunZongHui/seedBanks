day01

简洁版: https://github.com/PanJiaChen/vue-admin-template
加强版: https://github.com/PanJiaChen/vue-element-admin

前台项目和后台项目介绍

项目最终介绍及项目模板的介绍

模板代码各个文件的作用
静=》拆>定义，注册，使用=>组>app使用=》渲>浏览器渲染到页面
动=》初始化>数据请求     交互>页面与用户的交互


一、先写登录和退出登录


	1、按照之前的思路先搞login静态页面
		其实我们的静态页面已经有了
		修改上面和下面按钮为中文的登录
		给页面的根元素添加背景图片

	


	2、注册login路由组件在路由器当中
		其实路由已经注册ok了，我们不需要动
		
		删除api里面不需要的
		删除路由当中不需要的
		删除views当中不需要的
		



	3、使用路由组件，路由组件已经使用上了，不用再管了






	4、动态login组件实现
		1、收集数据已经写好，在data里面修改验证规则的函数为中文信息
		
       静态login实现之后，动态login收集数据也验证完成，那么接着就要发请求，发请求需要修改下面内容





		
	5、修改axios二次封装文件  
		基础路径要理解，超时时间修改为20s
		添加token需要修改   X-Token改为token
		请求成功里面的code需要添加不等于200的情况，if (res.code !== 20000 && res.code !== 200)要警告  





	修改请求相关的逻辑

  
	
	6、修改api接口user当中登录相关请求函数的接口为真实接口  
		只需要把url改过来即可
		其余的都已经书写ok了


	7、api接口请求函数写完，需要写store，store里面根本都不需要我们动，已经写好了   
		其实代码可以什么都不动，但是要看懂



	8、在login界面当中发请求（这里不需要修改，已经写好了）
		登录发请求不需要修改，直接404
		http://localhost:9528/dev-api/admin/acl/index/login
		这里是往本地发的，不能成功，因为没资源 
		我们需要让代理转发
	
	9、修改代理 
		禁用mock数据
		添加代理



	10、把nav当中右侧下拉当中改为首页和退出登录





二、书写品牌、属性、spu\sku （从头开始练习增删改查功能）
	1>、所有的商品相关路由组件三大步（定义  注册（先常量注册，后面需要修改）  使用）
	注意：需要修改面包屑当中第一项显示的默认值（把英文改为中文‘首页’）

		{
    			path:'/product',
    			component:Layout,
    			name:'Product',
    			meta: { title: '商品管理', icon: 'el-icon-s-shop' },
    			children:[
      				{
        				name:'Trademark',
        				path:'trademark/list',
        				component:() => import('@/views/product/trademark/List'),
        				meta: { title: '品牌管理'},
      				},
      				{
        				name:'Attr',
        				path:'attr/list',
        				component:() => import('@/views/product/attr/List'),
        				meta: { title: '属性管理'},
      				},
      				{
        				name:'Sku',
        				path:'sku/list',
        				component:() => import('@/views/product/sku/List'),
        				meta: { title: 'sku管理'},
      				},
      				{
        				name:'Spu',
        				path:'spu/list',
        				component:() => import('@/views/product/spu/List'),
        				meta: { title: 'spu管理'},
      				},
    			]
		},

	2>、和之前的一样（5天）



day02

三、品牌管理增删改查业务逻辑
	
    列表页（查）
	1、先搞静态页面   参考已完成的页面自己去使用element-ui去搭
	 	table写法
      			先写eltable 回车
      			有几列就复制几个列
      			先把动态数据属性data干掉
      			有边框得添加table的border属性
      			每个列的width控制列的宽度
      			每个列的label控制这个列的名称
      			想让那个列居中，那么哪个列需要添加align="center"
      			那个列是序号，需要添加type = "index"
	 	pagination写法
			关注怎么居中，需要添加style=“text-align:center”

	 	中间缝隙20px 给table添加上下外边距20px


	2、再搞动态页面
		
		api写法 
			es模块化的复习
		
		请求获取数据

		展示数据  注意table展示数据的东西




	
    增加

	1、实现静态页面  dialog嵌套form表单
		dialog有一个动态的数据决定dialog的显式和隐藏（布尔值）:visible.sync
		
		form当中 ：model=对象 指定收集的数据最终放在哪  
		form-item当中  是收集数据的每一项  每一项都可以有label指定这一项名称，label-width="100px"指定名称宽度
			  每一项当中都可以对应收集数据，收集的数据一般都是放在我们指定的对象当中

		upload：我们拷贝官方网站的上传头像那个，html  css  js都要拷贝过来

		

	2、实现添加动态交互和数据收集
		
		点击添加按钮实现 添加的对话框显示
		
		收集数据到指定的地方
			1、收集input的数据tmName，这个已经可以收集了 ，v-model
			2、收集upload的数据logoUrl  这个数据收集需要看拷贝过来的那些东西				
			    先请求上传到后端   后端返回真实路径    前端收集返回的真实路径

		添加收集完数据之后，没有确定发请求，而是点击取消，再次点击添加数据依然存在，这个bug需要解决
			就是点击添加按钮弹出dialog的时候，要把原本的tmForm当中的数据清空一下
			
    修改
	
	1、实现修改的静态页面，和添加的页面共用同一个，不需要写


	2、实现修改动态交互和数据收集
		点击修改按钮实现，修改的对话框显示（其实是同一个），只是这次要带上相应的数据进行初始化展示
		
		收集数据在添加当中已经搞定，不需要再次写收集功能

		修改数据直接把row赋值给tmform，会影响显示的数据，因此需要使用拷贝解决，让row和tmform不能是同一个对象



    发请求
	点击确定按钮去发请求添加品牌或者修改品牌
	1、获取收集好的参数数据
	2、整理收集好的参数数据
	3、发送请求
	4、成功干啥
	5、失败干啥




	


    删除
	使用的是messageBox做的，带确认的那个
	在点击确定的逻辑当中，我们需要发请求删除
	成功需要提示，然后重新获取数据（是获取哪页的要根据数据条数来决定）
	失败提示就好了



 表单验证
	单个表单验证
	整体表单验证  
	自定义验证规则 



四、平台属性管理增删改查业务逻辑
    
    1、平台属性相关的api接口请求函数

    2、实现我们的页面功能：两个el-card 上面的card放的是三级分类组件，下面的card还没开始做

    3、CategorySelector全局组件的静态实现
	根据官网form当中的行内form修改

    4、CategorySelector全局组件的动态实现 
	写三级分类接口请求函数
	一上来第一个分类就要有数据，所以我们要mouted发请求拿数据给第一项分类去遍历展示数据
	选中了第一项当中的某个分类，才会发请求拿第二项的数据进行遍历展示
	选中了第二项当中的某个分类，才会发请求拿第三项的数据进行遍历展示
	选中第一项需要清空第23项的数据
	选中第二项需要清空第三项的数据
	选中123项都要和父组件通信，把id传递到父组件当中


	父组件当中判断level保存三个id
	在父组件获取子组件传递过来的数据，保存3级id的时候需要发请求获取属性数据
	在父组件获取子组件传递过来的数据，保存1级id的时候需要清空父组件的23级id及属性列表数据
	在父组件获取子组件传递过来的数据，保存2级id的时候需要清空父组件的3级id及属性列表数据

day03

    5、属性列表页（查）
    	
    	属性列表的静态页面实现
		一个按钮和一个table

    	属性列表的动态实现
		动态数据已经可以获取到

	展示属性列表数据
	attrList:[
		{
			id:100
			attrName:'运行内存'，
			attrValueList:[
				{
					id:2
					attrId:100
					valueName:'8g'
				}

			]

		},

	]
	
	展示table数据的时候注意展示属性值列表那项，数据结构要清楚，使用的是vfor和作用域插槽

	最后展示操作的按钮，使用的是之前封装的HintButton，把之前的a标签改为el-tooltip


    6、属性的增
	实现增加属性的静态页面
		增加属性的静态页面和修改是一样的
		增加属性的静态页面和列表页都是在第二个card当中，但是同时只能显示一个
			用两个div，一个div包含列表页相关的，另外一个包含添加和修改的页面
			定义数据isShowList控制card当中显示的是哪一个 必须使用vshow
		增加属性的静态页面包含:一个行内form  两个按钮  一个table  两个按钮  尝试自己动手写写


	实现增加属性页面的动态交互（点击按钮切换：确定按钮和取消按钮）
		点击列表页面的添加属性按钮，切换到添加页面，就是把isShowList改为false
		点击添加页面的取消按钮，再切换回到列表页面，就是把isShowList改为true
		完成列表页添加属性按钮和添加页面的添加属性值按钮的可操作性 disabled

	
	实现增加属性动态收集数据
		收集属性名称： 已经做到了，因为我们使用的是v-model

		收集属性值列表：
			添加属性的属性值列表，一上来是一个空数组
			我们使用table在展示我们的属性值列表，但是一上来我们没有属性值，所以table里面没数据
			当我们添加属性值的时候
				1、我们是在属性值的列表（数组）当中添加一个属性值对象，只不过这个属性值对象所有的属性都是空的
					只是为了让table当中出现一行（一个输入框），在占位用的

				2、当出现了输入框之后，用户是要去输入新添的属性值名称，当用户输入了以后，我们才真正的收集到
					刚才添加的属性值对象当中，形成真正的属性值对象


				3、当用户失去焦点或者回车的时候，这个属性值对象才算完成收集

				4、当用户添加完成，点击取消再次点击添加原来的数据还在的bug以及用户收集剩余的categoryId和categoryLevel
					当用户点击添加按钮的时候，情况收集的对象，同时收集剩余的categoryId和categoryLevel


     7、属性的修改
	实现属性修改的静态页面
		和属性的添加用的是同一个静态页面，不需要再去写

	实现修改属性动态交互
		点击修改按钮，切换到修改的页面，并且把当前的数据row带上		

	实现修改属性数据收集
		和属性添加收集是一样的，不需要再写


day04

     8、属性值的模式添加（添加属性和修改属性是一样的）

	一个属性值要不是新添加的，要不是已经存在的，新添加属性值显示input，已经存在的属性值显示span，而且可以切换，证明每个属性值都有两个模式，这两个模式叫编辑模式和查看模式
	
	
	给每个属性值对象添加模式标识数据，用于确定这个属性值当前是input还是span
		对于新添加每个属性值的时候，都添加一个属性isEdit：true，代表添加的属性值是编辑模式

		在修改属性的时候，遍历每个已有的属性值对象都添加一个属性isEdit = false,这里必须使用$set才能响应式

		上面我们的表格当中不能直接写死是一个input，每个属性值根据isEdit决定是input还是span  使用vif


     9、属性值模式的切换
		在input上我们需要添加失去焦点和回车事件，切换为查看模式，本质就是修改isEdit属性值
			input在切换为span之前要判断数据合法性
				1、数据是不是空的
				2、除了自己以外，输入的数据是不是和其它的属性值名称重复
		
		在span上我们需要添加点击事件，切换为编辑模式，本质就是修改isEdit属性值	


	
    10、解决input输入框大的问题、span点击区域过小的问题、自动获取焦点的问题

		解决input输入框大的问题   直接添加size = "mini"
		span点击区域过小的问题    直接把span变为block  宽高100%
		自动获取焦点的问题
			什么时候要自动获取焦点  
				1、添加新属性值的时候  2、从span变为input的时候
			上面的html el-input需要添加ref  ref的值是各自的下标  $index

			在toEdit当中，添加自动获取焦点的逻辑 
				this.$nextTick(() => {
        				this.$refs[index].focus()
      				}) 
			在addAttrValue当中，添加自动获取焦点的逻辑
				this.$nextTick(() => {
        				this.$refs[this.attrForm.attrValueList.length - 1].focus()
      				})
			
			this.$nextTick的使用，必须要会


  







    11、删除属性值的操作
		删除属性值不是删除属性，不需要发请求，只需要从attrForm.attrValueList把对应的属性值对象删除就好了
		
		用到气泡确认框，用法参考官网
		
		气泡确认框点击确定按钮的事件名称叫 onConfirm 不是confirm  官网写错了



    12、保存属性操作
		点击保存按钮，书写回调
			获取收集的参数attrForm
			整理参数：
				1、属性值名称如果为空串，从属性值列表当中去除
				2、属性值当中去除isEdit属性
				3、属性值列表如果没有属性值，不发请求
			发请求
			成功   提示  返回列表  重新获取数据
			失败   提示

    13、删除属性
		点击列表页删除按钮删除属性
		发请求
		成功 提示 重新获取数据
		失败 提示

    14、处理保存按钮的可操作性
		属性值列表如果是空，不能点击保存
		
    15、处理三级联动的可操作性
		三级分类的可操作性，CategoySelector内部的form也可以使用disabled
		disabled的值恰好和父组件的isShowList是相反的
		父组件传递isShowList给CategoySelector，内部form的：disabled=“！isShowList”
















五、SPU管理增删改查业务逻辑
    1、spu功能演示，看看功能
    2、spu和sku   平台属性和销售属性 的概念理解
    
    3、spu页面 三级联动 
	整个页面和属性页面类似，也是两个card形成3d效果
	第一个card里面是，组件CategorySelector,第二个card里面是列表页
	
	CategorySelector组件已经是做好的组件，内部需要父组件定义的数据都要定义
		isShowList
		category1Id
		category2Id
		category3Id
		spuList
		page
		limit
		total
	
	CategorySelector组件已经是做好的组件，内部需要父组件定义的事件也得定义changeCategory
		changeCategory的回调当中和属性类似，注意保存3级类别id后需要发请求获取spu的分页列表


    4、spu列表页的实现
		静态页面实现 比属性多了一个分页器

		动态数据展示  



		实现三个页面在第二个card里面的切换
			列表页  添加或修改spu的页面   添加sku的页面 三个页面共享第二个card，同时只能显示一个

			列表页在一个div
			剩余的两个页面做成2个组件  SpuForm和SkuForm
			data当中设计两个数据  isShowSpuForm和isShowSkuForm控制三个页面的显示和隐藏切换
		
		对三个按钮添加点击事件达成三个页面之间的切换








		
				
day05

    5、修改spu
		点击修改spu要显示SpuForm子组件
		搭建修改spu和添加spu的静态页面

		在显示SpuForm的时候需要发送4个请求获取初始化数据
		在父组件当中通过$ref获取到子组件对象，调用子组件对象的一个方法，



		在这个方法当中去发4个请求
		4个请求要分析清楚，分别请求的是什么

		发请求获取4个数据，保存，保存在哪里要注意

		点击取消使用.sync返回到列表页

		将获取到的动态数据初始化展示

			前三项都是通过v-model直接展示的，注意品牌option需要做vfor
			
			spu图片列表的展示，需要在请求获取到图片列表的时候，处理一下，列表当中每个图片对象都要有name和url属性
				展示使用的是upload照片墙，需要把获取到的数据列表给upload的file-list属性
		
		
		展示销售属性：展示spu自己的销售属性，在table当中展示
					这里面也用到了el-tag
					这次的el-tag和平台属性不同，带关闭的标签
					这里面也有编辑模式和查看模式，只是这次编辑模式和查看模式每个属性只有一个，而不是每个属性值都有
							input里面的 vif和vmodel数据都是挂在当前属性身上的
					
				
			      展示所有的销售属性，但是除去自己，剩余的销售属性
					需要根据已有的销售属性列表和所有的销售属性列表计算出未使用的销售属性列表
					方法的嵌套用法  filter嵌套every






		
		收集数据
			前三个已经收集ok   spuName  描述   tmId
			
			收集图片列表
				1、把接口换成真实接口
				2、照片墙收集的时候，删除成功要收集，添加成功也要收集，都要把最新的图片列表收集起来
					:on-preview="handlePictureCardPreview"    预览大图，不需要写，人家本来就ok
          				:on-remove="handleRemove"     删除图片成功的回调，内部要收集图片列表
          				:on-success="handleSuccess"   添加图片成功的回调，内部也要收集图片列表	  
				3、注意：
					如果新上传了图片，那么新上传的图片和老的图片内部属性是不一样的
					老的图片：
					{
						id:17
						imgName:"de33680f921e5838.jpg"
						imgUrl:"http://47.93.148.192:8080/group1/M00/00/02/rBHu8l-rgfWASR1YAADsOUYB-2g312.jpg"
						name:"de33680f921e5838.jpg"
						spuId:3
						status:"success"
						uid:1628575544052
						url:"http://47.93.148.192:8080/group1/M00/00/02/rBHu8l-rgfWASR1YAADsOUYB-2g312.jpg"

					}

					新的图片：
					{
						name:"4.jpg"
						percentage:100
						raw:File
						response:Object
						size:371218
						status:"success"
						uid:1628575562820
						url:"blob:http://localhost:9528/51febe4a-d68e-494e-b151-ad05cdab34c1"

					}

					新的图片内部没有imgName和imgUrl 但是有name和url,只是url是本地路径，错的
					老的图片内部既有imgName和imgUrl 也有name和url 都是对的

					
					后期发请求我们的图片需求格式
					 {
          //   					id: 0,
          //   					imgName: "string",
          //   					imgUrl: "string",
          //   					spuId: 0,
          // 				 },
				
	

			收集销售属性
				添加销售属性
					添加销售属性就是从未使用的销售属性列表中，往spu自己的销售属性列表添加一个
					 
					1、添加到哪     spuInfo.spuSaleAttrList 

					2、添加的结构是什么
					{
            				baseSaleAttrId: 0,
            				saleAttrName: "string",
            				spuSaleAttrValueList: [],
          			}



					3、收集什么     
						选中的未使用的销售属性的baseSaleAttrId 和 saleAttrName
						收集到data当中

					4、添加销售属性的按钮可操作性处理，就看收集的数据当中有没有值，没有值就不能操作
					

					收集的过程：
						1）选中select某个项的时候，收集选中的那一项的baseSaleAttrId 和 saleAttrName，拼接收集到data
						2）当点击添加销售属性按钮的时候，在回调函数当中获取刚才收集到的data当中的数据
						把这个数据构造成要添加的对象结构
						3）把这个对象添加到指定的位置spuForm.spuSaleAttrList 
						4）将收集到的数据清空				
						
					


				添加销售属性值
					1、添加到哪
						添加到spu自己的销售属性当中销售属性值列表里面
						就是table当中   row.spuSaleAttrValueList

					2、添加的结构是啥  最后只需要销售属性值名称就可以了，其余都是多余的，删除掉
						{
                			saleAttrValueName: "string",
							baseSaleAttrId ：1   就是当前属性的id
              			},

		

					3、收集什么
						saleAttrValueName
						baseSaleAttrId 
						
					
					收集的过程：
						1）点击添加按钮，让button变为input，顺变自动获取焦点
							就是让row.inputVisible为true，要用$set

						2）输入属性值名称，并且同时就通过v-model把输入的数据保存在了row身上
					
						3）失去焦点或者回车之后，在回调函数当中，把收集到的数据，构造成想要的结构
							
						4）把构造成的结构对象添加到row.spuSaleAttrValueList
							添加之前需要判断收集到的数据是否为空，还有是否和已经存在重复



							

				删除属性值和删除属性
					都不会发请求
					点击响应的按钮，从对应的数组当中把当前这个数据删除数组的splice方法


day06

				保存操作

					获取收集的参数数据
						不只是有spuForm 还有 spuImgList  category3Id

					整理参数
						1、整理图片数据结构
						2、整理category3Id
						3、去掉所有销售属性身上不需要的属性

					发请求
						调用接口发请求

					成功
						1、提示
						2、返回到列表页   .sync 
						3、通知（自定义事件）父组件保存成功返回，需要让父组件去重新请求获取数据
							返回到父组件，调用事件回调函数的时候，要判断保存成功是添加回来的还是修改回来的
							需要传递回来spu的id，父组件接收到之后，有id就是修改回来的，没id就是添加回来的
							父组件根据返回的不同，重新获取数据的页码也不同
						4、子组件当中通知完父组件，还要重置自身的data 所有数据

					失败
						提示

				取消操作
					1、得返回到父组件
      				2、在子组件当中也得重置data的数据




    6、增加spu
		点击添加spu要显示SpuForm子组件
		在显示SpuForm的时候需要发送2个请求获取初始化数据
		在父组件当中通过$ref获取到子组件对象，调用子组件对象的一个方法，在这个方法当中去发2个请求
		2个请求要分析清楚，分别请求的是什么

		展示数据和收集数据不需要做，修改做完了，添加是一样的

    	
	
		

    7、删除spu
		气泡确认框
		请求
		成功需要提示 重新获取数据，注意页码
		失败提示















    8、添加sku
		sku静态页面的实现
				
		实现取消按钮返回列表
		
		实现点击添加sku按钮，发送3个请求获取sku页面初始化数据，和spu添加修改的时候方法一样
		
		发送请求的时候，可以使用promise.all,也可以不用
			
		请求获取到的数据需要初始化展示到静态页面
			spuName
				直接从spu当中拿
			平台属性
			销售属性
				双层vfor 外层遍历每个行内form的item，代表是每一个属性，
					 内层遍历每个select的option,代表外层遍历的每个属性的每个属性值
			图片列表
				直接展示在table当中，图片需要作用域插槽


		数据收集分析
			父组件给
			category3Id: "",
			tmId: "",
			spuId:"",
			
			通过v-model直接收集到的
        		price: "",
        		weight: "",
        		skuName: "",
        		skuDesc: "",

			通过代码去完成收集	
        		skuDefaultImg: "",
        		skuAttrValueList: [],
        		skuImageList: [],
        		skuSaleAttrValueList: [],
       			
		收集平台属性和销售属性（平台属性和销售属性几乎一致）
			1、添加到哪  skuInfo.skuAttrValueList

			2、添加的结构

			{
            			attrId: 0,
            			valueId: 0,
            			
          	},

          


			
			3、收集什么
				attrId: 0,
            	valueId: 0,


			
			4、怎么收集
				1、用户选中某个平台属性值的时候，把平台属性值的id和当前这个属性的id拼接，挂在当前这个属性身上
				2、在最后保存的时候，整理数据，我们需要把收集好的这些数据，给一个一个拿下来，变为我们需要的结构
				3、添加到对应的数组当中	skuForm.skuAttrValueList

	
		  			
		收集图片列表
			图片列表的收集很简单，不需要我们自己做很多事情
			table上有一个事件 @selection-change="handleSelectionChange"
				当你去选中或者取消图片选择的时候，这个事件会自动触发，并且会把选中的图片组成数组，传递给回调函数
				在回调函数当中，直接收集就好了
			
		收集默认图片数据
			1、设置默认图片功能
				请求回来的spu图片列表，每个图片都要添加一个isDefault属性，初始值都是字符串0
				table当中操作里面不应该只有按钮，而是根据每个图片的isDefault属性决定是按钮还是el-tag
				当点击按钮的时候，回调函数当中排它设置默认图片

			2、收集默认图片数据
				设置默认图片的时候，顺变把默认图片的路径收集起来，直接收集到位
		
				


		
	
        10、保存sku
		1、获取参数数据
			注意：获取的参数数据有很多，不只是skuForm
		2、整理参数
			1、整理父组件传递过来的spu当中的三个
			2、整理收集的图片列表（选中的那个图片列表），数据格式要和最终的格式比对
			3、整理平台属性和销售属性    
				用数组的reduce方法快速搞定
		3、发请求
			调用接口发请求
			
		4、成功
			1、提示
			2、返回到spu列表，但是不用再重新发请求获取spu列表数据
			3、清空重置skuForm的data数据
		5、失败
			提示

		


	11、取消操作
		取消之后 先返回spu列表，然后再清空重置skuForm的data数据















day07	

	
	12、三级联动的可操作性处理
		
		一开始 显示spu列表，三级联动可以选择
		isShowList：true
		isShowSpuForm: false,
      	isShowSkuForm: false,


		如果在添加修改spu,三级联动不可以选择
		isShowList：false
		isShowSpuForm: true

		如果在添加sku，三级联动不可以选择

		isShowList：false
      	isShowSkuForm: true

		

		isShowList 永远和isShowSpuForm或者isShowSkuForm:  是相反的

		给isShowSpuForm和isShowSkuForm都添加监视，如果一旦发生变化，让isShowList是变化的结果取反


六、其它商品管理相关操作介绍
	
	1、spu列表当中查看sku列表功能
		
		先实现dialog的静态页面，需要data定义数据控制dialog的显式和隐藏
		
		点击按钮实现弹出dialog，要先把传递的spu保存到data，用于显示dialog的title

		发送请求获取skuList数据保存在data，用于显示在表格
			loading加载用在展示动态数据的所有组件，按钮也可以，可以确保按钮点一次只会发一个请求
			请求前有loading加载
			请求后需要取消loading加载

		关闭dialog的时候清空dialog以前展示的数据
			用到dialog的before-close属性，它是一个函数数据
			在函数当中，去清除skuList  并且可以重置一下其它数据
			





	2、sku管理的串讲
		抽屉和布局（栅格）
			



	3、sku管理当中轮播图组件（scoped和深度作用选择器）

		scoped添加和不添加的区别
			scoped不写，那么当前组件的样式会影响其它组件
			scoped写上，把样式作用在当前组件内部及子组件的根元素身上 *******************
			
			scoped如何把样式作用在本组件和子组件根元素身上
				加了scoped就会有唯一的一个标识值，而这个标识数据会作为被影响到的元素的属性
				这个元素的样式会在选择器的最右侧添加这个属性选择器。


			（
				/* scoped填上以后，当前组件及子组件的根元素都是这个样式能作用到的元素
				会给这些个能作用到的元素全部添加同一个随机的data-v开头的数据，这些数据
				就成为这些元素身上的一个特殊的属性 */

				
				/* scoped当中的样式，会从上面添加了data-v的标识所有的元素当中
				找看看谁和我样式的选择器匹配，匹配上就生效 */
			）


				不加scoped   
					h2{
						color:hotpink
					}

				加了scoped
					h2[data-v-2780d981] {
    						background-color: hotpink;
					}

		
			
		scoped中有些元素直接添加样式就会生效，而有些元素直接添加样式就不会生效？
			一句话：scoped只能把样式作用延长到自身元素还有子组件的根元素身上
    			如果在scoped书写的样式，刚好是作用在子组件的根元素身上，就会生效
    			如果在scoped书写的样式，不是作用在子组件根元素而是子组件根元素内部元素身上，就不会生效
		



  		加了scoped，还想让子组件根元素内部元素的样式生效（使用深度作用选择器）
  			1、把子组件内部元素的样式重新写一个style写，不加scoped，用的不多

  			2、深度作用选择器的写法    ********************
    				如果是原生css 深度作用选择器  
        				父元素 >>> 选中的元素 
    				如果是less  scss 预编译的css文件
        				/deep/ 用于less
        				::v-deep  都行


   		添加深度作用选择器css怎么处理的
   			不加添加深度作用选择器的时候，scoped的唯一标识会作为属性选择器添加在css选择器最右侧选中的元素身上，去限制
  			添加了深度作用选择器的时候，scoped的唯一标识会作为属性选择器添加在css选择器最左侧元素身上，限制不了选中的元素	



七、echarts和v-charts的使用
	1、复制成型的首页替换我们的首页
	2、安装echarts@4 和 v-charts  还有vue-count-to
	3、复制和echarts v-charts相关的配置文件  
		plugins文件夹  里面是引入注册使用v-charts
		复制4个svg图片

	
	4、数据可视化
		使用通俗易懂直观的图表将不直观的数据展示出来

		数据可视化一般都是使用库去完成
			最原生的是canvas  -----》    d3库 对canvas包装了一下本质还是一样  ----》 echarts（啥都能用） ----》 v-charts(专门针对vue的)


	5、echarts的基本使用
		根据官方教程

	6、重新使用echarts封装项目的linechart组件
	
	7、v-charts组件的使用
	
	8、mixin当中的resize混入文件实现响应式





day08
八、权限相关（非常重要）

	1、权限控制 和 2、权限数据管理



	目前网页的功能相关模块
		1、首页
		2、商品管理相关所有功能

	
	想要达到的效果
		首页的功能可以让所有用户操作
		商品管理的功能只让有资格（权限信息数据）的用户操作
	
	
	
	两个用户   admin   test1

		admin 是超级用户，网页所有的功能都有权限操作，拥有所有的功能权限信息数据
		test1 是我们自己创建的用户，网页上只有部分功能有权限操作，拥有部分的功能权限信息数据
		
		他们的权限数据怎么来的，目前先不用管，最后再说



		用户拿到的按钮权限数据，是相关的按钮权限标识字符串数组，可以实现按钮权限操作
				这个数组决定这个用户能看到的路由页面信息的按钮，后面说


		用户拿到的角色权限数据，是相关的角色的名称
			为了后面分配权限用的，后面说

		
	2、路由数组的组成
		现在要根据用户的路由权限数据决定路由当中注册哪些路由，那么我们的路由就要改变，分为以下三种

		常量路由 异步路由 任意路由
			常量路由是任意用户都能操作的路由，就是都能看到这个路由组件
		
			异步路由就是权限路由，用户拥有这个路由对应的name信息，这个路由组件才能被用户操作，才能看到

			任意路由，随意的不合法的路由，全部转向404组件页面，添加路由器的时候，必须最后一个注册	


	3、根据用户路由权限数据信息决定最后路由器里面注册的都是哪些路由
		 
		1、修改路由当中注册的路由为三种不同的路由  常量路由 异步路由 任意路由
		2、创建路由器的时候只能注册常量路由
		3、获取用户信息的时候，真正的根据用户权限数据信息决定路由当中有哪些异步路由
			存储用户权限信息相关
				存储用户的角色信息
				存储用户的按钮权限信息
				存储用户最终的所有路由数组，不是路由名称
			通过返回的用户的路由名称数组，从所有的异步路由数组当中，过滤出用户自己的异步路由数组
			然后合并常量路由和自己的异步路由及任意路由组成用户所有的路由，提交保存

						
		4、设置用户路由的时候可以使用动态添加路由，把异步路由和任意路由添加到路由器的路由当中
			router.addRoutes([...asyncRoutes,anyRoutes])
				
	5、在生成菜单的时候，是根据我们最终的所有的路由数组动态生成的
		
		把layout当中的sidbar组件内部routes改成我们自己存储的routes









	路由（菜单）权限操作（根据登录后用户的权限信息数据，决定网页功能是否能被这个用户操作）
		**************
		1、用户首先登陆 ---》 获取到token  ---》去到token校验 ---》 获取用户信息
		2、刚开始它只是获取了用户的name和avatar保存起来
		3、它虽然只保存name和avatar，但是用户登录后难道就只有这两个数据吗？答案是否定的
		4、查看登录请求用户数据返回的信息到底有哪些
			除了name和avatar，还有三个其它的数据，这三个数据就是权限控制相关的权限数据信息

		5、发现routes这个数组，是用户菜单权限操作的关键
			用户获取到routes数据，它是用户想要看到的菜单页面对应的路由的名称字符串组成的
			我们得让路由器里面注册的路由，是用户返回的这些name值对应的路由
			最后我们这些路由就会动态的生成菜单页面

		6、现在我们的路由器当中是什么状况
			目前我们的路由器里面，就是不关心你获取的routes数组，而是全部路由都注册了
			这就导致了无论哪个用户去登录，所有的信息都会展露给它

			注意：我们的路由器里面，不能所有的路由都直接使用常量路由注册，否则所有用户都可以操作，没法实现路由			权限操作而目前我们都是用的常量路由，所以两个用户都能看到商品管理相关路由页面

		7、拆分路由为三大类：常量路由 异步路由 任意路由

		8、在user当中保存用户的权限数据
			name  avatar buttons  roles他们可以直接在getInfo里面提交保存
			routes 需要自己根据返回的字符串数组去先过滤出用户自己的异步路由
				然后再和常量路由、任意路由合并生成，才能保存
			注意：保存routes是当前用户对应的所有路由数组，不是字符串数组

		9、在user当中必须要动态的往路由器当中添加我们用户自己的异步路由和任意路由
			动态注册（添加）路由

		10、在页面上我们显示的时候是遍历的自己的所有的路由信息，而不是一开始的常量路由信息
			页面需要去把原本的routes换成我们自己的routes
							
		**************
		
	总结：
		路由（菜单）权限的控制

			全局路由导航守卫 和  动态添加路由    才能做路由菜单权限控制
				
				1、用户登录

				2、全局路由导航守卫当中获取用户的菜单权限数据信息（name数组routes）

				3、根据用户的菜单权限数据信息，从所有的异步路由当中过滤出当前用户自己的异步路由

				4、使用路由器的动态添加路由，将用户的异步路由和任意路由，动态添加到路由器当中
		
				5、菜单是根据，当前用户的所有路由，动态生成







	
	权限的控制和权限的数据管理不是一回事

	权限的控制，是根据用户的权限数据，决定功能哪些可以操作
	权限数据的管理，是说的用户的权限数据怎么增删改查
	权限数据包含这么三项：用户  角色  权限
	这三个数据之间的关系是多对多的关系


	增加权限数据管理
		1、准备完成的东西
		复制已完成的api 当中的acl
			注意：1、其中已经有了user,需要把自己的user文件删除
			      2、把product里面index,放到api当中
				在index当中把acl相关的引入统一管理，注意user当中暴露方式和其它不一样
			      3、把store当中user里面相关接口引入路径改正	

		复制已完成的views 当中定义好的acl组件
		复制已完成的routes 当中定义好的acl路由配置





						
		串讲实现权限三大数据的管理  用户 角色  权限

			用户的增删改查

				1、问题1

				搜索的时候我们输入用户名，用户名就被收集到一个对象tempObject
				点击搜索，就会携带tempObject发请求，假设就只有这一个对象，那么发请求用的就是tempObject发请求的
				再次输入数据，不点搜索按钮，直接翻页就会出问题，翻页就不是拿的原来的数据，而是新的数据

				用两个对象处理，一个专门收集数据，一个专门发请求用的数据
				
				2、问题2

					用户进行角色授权
					不确定的checkbox属性


			
			角色的增删改查

				修改角色和确定按钮 同时只能出现一个  编辑模式和查看模式设置
				
				tree结构的用法：下去都查一下官网  数据结构一定要参考官网

				分配权限
					修改源码，获取所有的上级id，否则权限添加不上



				
					
			权限路由增删改查

				操作添加一个新的菜单，添加的时候注意大小写

				1、在权限数据管理当中必须添加上我们的权限数据信息（还得授权，admin会自动授权，其它用户得自己做）
				2、再去创建我们的路由组件
				3、再去配置我们的路由



				新添加完一个菜单权限数据，所有的用户都可以看到这个菜单吗？
				
				新添加完一个菜单数据（前提是要创建好对应的路由组件和路由）：

					1、添加完菜单权限数据，用户有没有这个菜单权限的信息是需要我们去设定的，除了admin
					2、用户有这个权限信息，才有可能看到这个菜单，我们如果有这个信息，菜单里面就会出现
						对应的路由菜单	
					3、用户没有设定这个菜单权限信息，那么就看不到这个路由菜单	









				按钮级别权限的添加和按钮权限的校验操作
					1、按钮级别权限依赖于菜单级别权限
					2、我们需要在菜单权限当中去添加按钮级别权限（增删改都要添加）
					3、添加了不代表就能用
						1》我们需要把这些按钮权限分配给用户，可以只分配其中的部分
						2》用户在使用按钮级别权限的时候需要自己校验是否拥有这个按钮的权限
					

			整个权限2个bug
				1、使用新用户登录完成，admin再次登录，权限菜单显示出问题
					原因：过滤的时候把最原始的所有的异步路由当中某个二级路由给毁了
					解决： 不能再过滤的时候直接过滤最原始的数据，需要深拷贝

				2、当我们退出一个用户，那么会保留这个用户之前所在页面的路径
				   重新登录一个新的用户之后，我们会让这个用户自动跳转到上一个用户退出的地方
				  此时会出现白板

					原因：我们之前缩写的守卫当中，获取用户用户信息之后，直接next()
					代表无条件放行，但是它是再之前的路由基础上放行的，而现在我们的路由已经
					动态的改变了，所以找不到，卡顿
					解决：我们需要强制的让next重新去跳转之前想去的地方一次
					next（{...to}）,新路由匹配的时候就会发现有异常了转向404
					










任务安排：

	1、权限的控制：上午讲的东西，所有人今天必须搞定

	2、权限数据的管理： 不需要我们大家去敲增删改查了，但是我们得去操作操作
		最主要的是自己去添加用户  添加角色  添加一个新的菜单权限   添加按钮权限




	3、登录相关的东西，也就是我们这个项目一开始我们做的
		自己拷贝一份新的模板，重新去写登录，把store当中缩写的登录全部相关改为await和async
		所有之前存储再cookie里面的东西这次全部保存再localStorage
		导航守卫做token校验可以先放放

	4、所有的商品管理我们不再敲了，把之前敲完的全部拷贝到这个新的模板当中即可
		页面正常显示，能够增删改查

	5、把权限控制自己添加上

	6、自己添加一个菜单和按钮级别权限






							
